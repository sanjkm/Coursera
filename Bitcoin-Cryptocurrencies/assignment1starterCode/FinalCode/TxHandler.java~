import java.util.ArrayList;
import java.util.Arrays;

public class TxHandler {

    /**
     * Creates a public ledger whose current UTXOPool (collection of unspent transaction outputs) is
     * {@code utxoPool}. This should make a copy of utxoPool by using the UTXOPool(UTXOPool uPool)
     * constructor.
     */
    public TxHandler(UTXOPool utxoPool) {
	// Sanjay code
	private UTXOPool curr_UTXOPool;
	curr_UTXOPool = UTXOPool(utxoPool);
    }

    /**
     * @return true if:
     * (1) all outputs claimed by {@code tx} are in the current UTXO pool, 
     * (2) the signatures on each input of {@code tx} are valid, 
     * (3) no UTXO is claimed multiple times by {@code tx},
     * (4) all of {@code tx}s output values are non-negative, and
     * (5) the sum of {@code tx}s input values is greater than or equal to the sum of its output
     *     values; and false otherwise.
     */
    public boolean isValidTx(Transaction tx) {
        // IMPLEMENT THIS
	// Sanjay code
	
	// Checks for double maps of the same UTXO
	private ArrayList<UTXO> claimedUTXOlist;
	claimedUTXOlist = new ArrayList<UTXO>();
	
	for (i=0;i<(tx.inputs).size();i++) {
	    inp = tx.inputs[i];
	    UTXO in_utxo = UTXO(inp.prevTxHash, inp.outputIndex);
	    
	    // Check if in_utxo is in the currUTXOPool
	    // If not in Pool, then not a valid tx
	    if ((currUTXOPool.contains (in_utxo)) == 0) {
		return 0;
	    }

	    // If in_utxo has already been claimed, then not a valid tx
	    if (claimedUTXOlist.contains (in_utxo) == 1) {
		return 0;
	    }

	    // Now, we add in_utxo to the claimed list
	    claimedUTXOlist.add (utxo_test);	    
	    
	    // Verify the signature of the claimed output	    
	    PublicKey in_pub_key = (currUTXOPool.getTxOutput (in_utxo)).address;

	    byte[] msg = tx.getRawDataToSign (i);

	    if (verifySignature (in_pub_key, msg, inp.signature) == 0) {
		return 0;
	    }

	    input_sum +=  (currUTXOPool.getTxOutput (in_utxo)).value;
	}

	// Checks for tx outputs with negative values, and gets the
	// sum of all out tx output values
	for (Transaction.Output op : tx.outputs) {
	    if (op.val < 0) {
		return 0;
	    }
	    output_sum += op.val;
	}

	// Input sum less than output sum means invalid tx
	if (input_sum < output_sum) {
	    return 0;
	}

	return 1;	    
    }

    /**
     * Handles each epoch by receiving an unordered array of proposed transactions, checking each
     * transaction for correctness, returning a mutually valid array of accepted transactions, and
     * updating the current UTXO pool as appropriate.
     */
    public Transaction[] handleTxs(Transaction[] possibleTxs) {
        // IMPLEMENT THIS
	ArrayList <Transaction> acceptedTxs = new ArrayList<Transaction>();
	ArrayList <int> accepted_tx_indices = new ArrayList<int>();
	int num_accepted;

	ArrayList <Transaction> poss_Txs = new ArrayList<Transaction>();
	for (i=0;i<possibleTxs.size();i++) {
	    poss_Txs.add (possibleTxs[i]);
	}
	
	
	while (1) {
	    num_accepted = 0;
	    
	    for (int i=0; i < poss_Txs.size(); i++) {
		if (isValidTx (poss_Txs[i]) == 1) {
		    num_accepted += 1;
		    acceptedTxs.add (poss_Txs[i]);
		    accepted_tx_indices.add(i);

		    // Modify currUTXOlist appropriately
		    // Cycle through the list of inputs in the
		    // transaction
		    for (int j=0; j<(poss_Txs[i].inputs).size(); j++) {
			Transaction.input inp = (poss_Txs[i].inputs)[j];
			Transaction.output op = (poss_Txs[i].outputs)[j];
			
			UTXO old_UTXO = UTXO(inp.prevTxHash, inp.outputIndex);

			// Remove old_UTXO from currUTXOlist
			currUTXOlist.remove (old_UTXO);

			// construct new_UTXO with tx input and output
			UTXO new_UTXO = UTXO(poss_Txs[i].getRawDataToSign(j),
					     j);
			currUTXOlist.addUTXO (new_UTXO, op);
		    }
		}
	    }
	    
	    // Now, remove the accepted Txs from poss_Txs
	    // and clear the accepted tx indices array
	    for (int nums : accepted_tx_indices) {
		poss_Txs.remove(nums);
	    }
		
	    accepted_tx_indices.clear();	    
	    		    

	    // If no transactions in the list are determined to be acceptable,
	    // then there are no more to be added
	    // Return the list of acceptedTxs
	    if (num_accepted == 0) {
		Transaction[] final_Txs = new Transaction[acceptedTxs.size()];
		int k = 0;
		for (Transaction accTx : acceptedTxs) {
		    final_Txs[k++] = accTx;
		
		return final_Txs;
	    }
	}
    }

}
